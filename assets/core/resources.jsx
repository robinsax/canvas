/*
*	This file defines the core system features.
*/

class ResourceManager {
	/*
	*	The global `resources` object is used for resource import and export. 
	*	The code generated by preprocessor directives relys on it's existance. 
	*	It is the first object defined by the plugin system.
	*/

	constructor() {
		this.log = new Logger('resources');
	}
	
	export(moduleName, exportMap) {
		/* 
		*	Export the contents of `exportMap` as `moduleName`. Powers the 
		*	`::export` preprocessor directive.
		*/ 
		window[moduleName] = exportMap; 
	}

	loadStyle(stylesheet) {
		/* Load a stylesheet. Powers the `::style` preprocessor directive. */
		let path = '/assets/' + stylesheet.replace('.', '/') + '.css';
		this.log.debug('Loading stylesheet ' + path);

		//	Create and attach the element.
		let importHost = document.createElement('link');
		importHost.setAttribute('type', 'text/css');
		importHost.setAttribute('rel', 'stylesheet');
		importHost.setAttribute('href', path);
		document.head.appendChild(importHost);
	}

	import(moduleNames, callback) {
		/* 
		*	Import a set of modules by name, invoking `callback` once they are 
		*	available. This powers the `::import` preprocess directive.
		*/
		//	Define completion counter and threshold.
		let importCount = 0, importTotal = moduleNames.length;
		
		//	Define a callback that invokes the callback if the imports are
		//	complete.
		const finishImport = () => {
			if (++importCount == importTotal) callback();
		}

		//	Iterate the moduels to import, importing each with a script tag.
		for (var i = 0; i < importTotal; i++) {
			let moduleName = moduleNames[i],
				//	Decide the path.
				path = '/assets/' + moduleName.replace('.', '/') + '.js';
			
			if (window[moduleName]) {
				finishImport();
				return;
			}
			
			this.log.debug('Importing ' + moduleName + ' from ' + path);
			//	Create and attach the host script tag.
			let importHost = document.createElement('script');
			importHost.type = 'text/javascript';
			if (importHost.readyState) {
				//	Legacy IE watch.
				importHost.onreadystatechange = () => {
					if (!(importHost.readyState === 'loaded' || importHost.readyState == 'complete')) return;
					
					importHost.onreadystatechange = null;
					finishImport();
				}
			}
			else {
				//	Actually good browser watch.
				importHost.onload = finishImport;
				importHost.onerror = () => this.log.critical('Failed to import "' + moduleName + '"');
			}
			importHost.setAttribute('src', path);
			document.head.appendChild(importHost);
		}
	}
}

//	Export system components directly to window.
window.resources = new ResourceManager();
