{#
	Form generation macros.
#}

{#
	Create a form header containing the error summary placeholder.

	:title The form title.
#}
{% macro header(title=None) %}
	{% if title is not none %}
		<h2>{{ title }}</h2>
	{% endif %}
	<p class="error-summary hidden"></p>
{% endmacro %}

{#
	Create the area to display errors.
#}
{% macro error_area() %}
	<p class="error-summary hidden"></p>
{% endmacro %}

{#
	Add set of attributes that represent a `form` parameters (`cv-param` and 
	`cv-value`). When the `form` containing the element with these attributes 
	is submitted, `param` and `value` are included in the request as a key, 
	value pair.
	
	:param The parameter key.
	:value The parameter value.
#}
{% macro parameter(param, value) %}
	cv-param="{{ param }}={{ value }}"
{% endmacro %}

{#
	Add an attribute that causes requests fired from below this point in the DOM 
	who don't have an `action` specified yet to have their `event` property set.

	:action The name of the action to set.
#}
{% macro send_action(action) %}
	cv-send-action="{{ action }}"
{% endmacro %}

{#
	Create a form field, either with specific parameters or based on some 
	attribute of a model class (or both). Any specified values will override 
	the defaults from the model class attribute.
	
	Basic usage follows the pattern:
	```
	{{ f.field(type='text', name='username', placeholder='jsmith', label='Username', validator='username') }}
	```

	Or, with icons instead of labels:
	```
	{{ f.field(type='password', name='password', placeholder='Password', icon='lock', validator='password') }}
	```

	To set `type`, `name`, `label`, `placeholder`, and `validator` based the 
	schema associated with some model class attribute:
	```
	{{ f.field(attr='password') }}
	```

	The above requires a model class parameter named `form_model` to be provided. 
	If this isn't the case, or your template is referencing multiple models 
	this way, you can specify the model class in the call:
	```
	{{ f.field(model=User, attr='password') }}
	```
	Where `User` is a model class passed to your template.

	:type The input type (will override `attr` default).
	:name The form parameter name (will override `attr` default).
	:placeholder The placeholder text.
	:icon The form icon to be used instead of, or together with, a label.
	:model The model class whose attributes will be used to populate other 
		parameters.
	:attr The name of the model attribute to use for this field.
	:icon_only Whether the model object attribute should avoid setting the 
		label (e.g. You set `attr` but don't want a label).
	:default_placeholder Whether to use the label from `attr` as a
		default placeholder.
	:cls Additional field classes.
	:validator The name of the validator(s) to use if any are supported by 
		the view.
	:value The initial value.
	:values A list of `name, value` pairs to use if this is a select
		input.
#}
{% macro field(type=None, name=None, label=None, icon=None, placeholder=None, model=None, attr=None, attrs=None, icon_only=False, default_placeholder=True, cls='', validator=None, value=None, values=None) %}
	{# Assert parameters are valid #}
	{% if (name is none or type is none) and attr is none %}
		{{ h.parameter_error('Cannot create field without name and type, or attr') }}
	{% endif %}
	{% if type == 'select' and values is none %}
		{{ h.parameter_error('Cannot create select input without values') }}
	{% endif %}
	
	{% if attr is not none %}
		{% if model is none %}
			{% if form_model is none %}
				{{ h.parameter_error('Cannot use attr if model is not specified in arguments or render call') }}
			{% else %}
				{% set model = form_model %}
			{% endif %}
		{% endif %}
		{% set model_attr = h.describe_model_attr(model, attr) %}
		{% if type is none %}
			{% set type = model_attr.type %}
		{% endif %}
		{% if name is none %}
			{% set name = model_attr.name %}
		{% endif %}
		{% if validator is none %}
			{% set validator = model_attr.validator %}
		{% endif %}
		{% if not icon_only and label is none %}
			{% set label = model_attr.label %}
		{% endif %}
		{% if default_placeholder and placeholder is none %}
			{% set placeholder = model_attr.label %}
		{% endif %}
	{% endif %}

	{% if label is not none %}
		{% set cls = 'labeled %s'%cls %}
	{% endif %}
	{% if icon is not none %}
		{% set cls = 'iconed %s'%cls %}
	{% endif %}
	{% if placeholder is none %}
		{% set placeholder = '' %}
	{% endif %}

	{% if type == 'textarea' %}
		{% set cls = 'textarea %s'%cls %}
	{% endif %}
	{% if type == 'select' or type == 'date' %}
		{% set validator = {'repr': 'option:any', 'error': 'Select a value'} %}
	{% else %}
		{% set validator = h.get_client_validator(validator) %}
	{% endif %}
	{% set common_attrs = 'name="%s" cv-validator="%s" cv-error="%s"'%(name, validator.repr, validator.error|uri_encode) %}
	{% if value is not none %}
		{% set common_attrs = 'value="%s" %s'%(value, common_attrs) %}
	{% endif %}
	<div class="field {{ cls }}">
		{% if icon is not none %}
			<div class="fa fa-{{ icon }} icon"></div>
		{% endif %}
		{% if label is not none %}
			<div class="text label">{{ label }}</div>
		{% endif %}
		{% if type == 'textarea' %}
			<textarea {{ common_attrs }}{% if attrs is not none %} {{ attrs }}{% endif %} placeholder="{{ placeholder }}"></textarea>
		{% elif type == 'select' %}
			<select {{ common_attrs }}>
				{% if placeholder is not none %}
					<option selected disabled>{{ placeholder }}</option>
				{% endif %}
				{% for name, value in values.items() %}
					<option value="{{ value }}">{{ name }}</option>
				{% endfor %}
			</select>
		{% else %}
			{% if type == 'checkbox' %}
				<div class="checkbox-wrap">
			{% endif %}
			<input type="{{ type }}" {{ common_attrs }}{% if attrs is not none %} {{ attrs }}{% endif %} placeholder="{{ placeholder }}"/>
			{% if type == 'checkbox' %}
				</div>
			{% endif %}
		{% endif %}
		<div class="error-desc"></div>
	</div>
{% endmacro %}

{#
	Create a basic form submission button.
	:text The button text.
	:icon The button icon.
	:cls Additional classes.
#}
{% macro submit_button(text=None, icon='arrow-right', cls='', action=None) %}
	<div class="align-right form-width">
		{{ c.button(text=text, icon=icon, cls=cls, event='submit', attrs='' if action is none else 'cv-send-action="%s"'%action) }}
	</div>
{% endmacro %}
