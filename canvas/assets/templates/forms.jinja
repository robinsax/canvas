{#
	TODO
#}

{#
	Create a form header containing the error
	summary placeholder
	:title The form title
#}
{% macro header(title=None) %}
	{% if title is not none %}
		<h2>{{ title }}</h2>
	{% endif %}
	<div class="error-summary"></div>
{% endmacro %}

{#
	Create the area to display errors
#}
{% macro error_area() %}
	<div class="error-summary"></div>
{% endmacro %}

{#
	Add set of attributes that represent a `form` parameter (`data-param`
	and `data-value`). When the `form` containing the element with these 
	attributes is submitted, `param` and `value` are included in the request
	as a key, value pair.
	:param The parameter key
	:value The parameter value
#}
{% macro parameter(param, value) %}
	cv-param="{{ param }}={{ value }}"
{% endmacro %}

{#
	Add an attribute that causes requests fired from below this point in the
	DOM who don't have an `action` specified yet to have their `action` property
	set
	:action The name of the action to set
#}
{% macro send_action(action) %}
	cv-send-action="{{ action }}"
{% endmacro %}

{#
	Create a form field, either with specific information
	or based on some attribute of a model class. Any specified 
	values will override the defaults from the model class attribute.
	The first validator for the given model class attribute or specified 
	name that is supported by the view will be sent there for user
	convience. 
	
	Basic usage follows the pattern
	```
	{{ f.field(type='text', name='username', placeholder='jsmith', label='Username', validator='username') }}
	```
	Or, with icons instead of labels
	```
	{{ f.field(type='password', name='password', placeholder='Password', icon='lock', validator='password') }}
	```

	To set `type`, `name`, `label`, `placeholder`, and `validator` based the
	the schema associated with some model class attribute
	```
	{{ f.field(attr='password') }}
	```
	The above requires the `form_model` keyword argument to be set in the
	call to `render_template` or `render_form`. If this isn't the case, or your
	template is referencing multiple models this way, you can alternatively use
	```
	{{ f.field(model=User, attr='password') }}
	```
	Where `User` is a model class passed to your template

	:type The input type (will override `attr` default)
	:name The form parameter name (will override `attr` default)
	:placeholder The placeholder text
	:icon The form icon to be used in replacement of, or 
		together with, a label
	:model The model class whose attributes will be used to populate 
		other parameters (redundant if the render call specified `form_model`)
	:attr The name of the model attribute to use for this field
	:icon_only Whether the model object attribute should avoid setting
		the label (e.g. You set `attr` but don't want a label)
	:default_placeholder Whether to use the label from `attr` as a
		default placeholder
	:cls Additional field classes
	:validator The name of the validator(s) to use if any are supported
		by the view
	:value The initial value
	:values A list of `name, value` pairs to use if this is a select
		input
#}
{% macro field(type=None, name=None, placeholder=None, label=None, icon=None, model=None, attr=None, icon_only=False, default_placeholder=True, cls='', validator=None, value=None, values=None) %}
	{% if (name is none or type is none) and attr is none %}
		{{ parameter_error('Cannot create field without name and type, or attr') }}
	{% endif %}
	{% if type == 'select' and values is none %}
		{{ parameter_error('Cannot create select input without values') }}
	{% endif %}
	{% if attr is not none %}
		{% if model is none %}
			{% if form_model is none %}
				{{ parameter_error('Cannot use attr if model is not specified in arguments or render call') }}
			{% else %}
				{% set model = form_model %}
			{% endif %}
		{% endif %}
		{% set model_attr = describe_model_attr(model, attr) %}
		{% if type is none %}
			{% set type = model_attr.type %}
		{% endif %}
		{% if name is none %}
			{% set name = model_attr.name %}
		{% endif %}
		{% if validator is none %}
			{% set validator = model_attr.validator %}
		{% endif %}
		{% if not icon_only and label is none %}
			{% set label = model_attr.label %}
		{% endif %}
		{% if default_placeholder and placeholder is none %}
			{% set placeholder = model_attr.label %}
		{% endif %}
	{% endif %}
	{% if label is not none %}
		{% set cls = 'labeled %s'%cls %}
	{% endif %}
	{% if icon is not none %}
		{% set cls = 'iconed %s'%cls %}
	{% endif %}
	{% if placeholder is none %}
		{% set placeholder = '' %}
	{% endif %}
	{% if type == 'textarea' %}
		{% set cls = 'textarea %s'%cls %}
	{% endif %}
	{% if type == 'select' or type == 'date' %}
		{% set validator = {'repr': 'option:any', 'error': 'Select a value'} %}
	{% else %}
		{% set validator = get_client_validator(validator) %}
	{% endif %}
	{% set common_attrs = 'name="%s" cv-validator="%s" cv-error="%s"'%(name, validator.repr, validator.error) %}
	{% if value is not none %}
		{% set common_attrs = 'value="%s" %s'%(value, common_attrs) %}
	{% endif %}
	<div class="field {{ cls }}">
		{% if icon is not none %}
			<div class="fa fa-{{ icon }} icon"></div>
		{% endif %}
		{% if label is not none %}
			<div class="text label">{{ label }}</div>
		{% endif %}
		{% if type == 'textarea' %}
			<textarea {{ common_attrs }} placeholder="{{ placeholder }}"></textarea>
		{% elif type == 'select' %}
			<select {{ common_attrs }}>
				{% if placeholder is not none %}
					<option selected disabled>{{ placeholder }}</option>
				{% endif %}
				{% for name, value in values.items() %}
					<option value="{{ value }}">{{ name }}</option>
				{% endfor %}
			</select>
		{% else %}
			<input type="{{ type }}" {{ common_attrs }} placeholder="{{ placeholder }}"/>
		{% endif %}
		<div class="error-desc"></div>
	</div>
{% endmacro %}

{#
	Creates a basic form given the current form target TODO: Doc and improve
#}
{% macro quick_form() %}
	{% for col in form_model.__columns__ %}
		{{ field(attr=col) }}
	{% endfor %}
{% endmacro %}

{#
	Create a basic submit button
	:text The button text
	:icon The button icon
	:cls Additional button classes
#}
{% macro submit_button(text=None, icon='arrow-right', cls='', action=None) %}
	<div class="align-right">
		{{ c.button(text=text, icon=icon, cls=cls, action=action, submit=True) }}
	</div>
{% endmacro %}