{#
	A header inserted at the top of every rendered `.less` file.
#}
{# Create palettes #}
{% for name, palette in config.styling.palettes.items() %}
	{% for color_name, color in palette.items() %}
		@{{ name }}_{{ color_name }}: {{ color }};
	{% endfor %}
{% endfor %}

{# Create breakpoints #}
{% for px in config.styling.breakpoints %}
	@breakpoint_{{ loop.index }}: {{ px }}px;
{% endfor %}

{# Create header height #}
@header_height: {{ config.styling.header_height }}px;

{# Create fonts #}
@font-face {
	font-family: "default-sans";
	src: url("{{ h.asset_url('fonts/%s'%config.styling.font_set.sans_serif) }}");
}
@font-face {
	font-family: "default-serif";
	src: url("{{ h.asset_url('fonts/%s'%config.styling.font_set.serif) }}");
}

{# Create common utility mixins #}
.clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

.linearGradient(@degs, @c1, @c2) {
	background: -moz-linear-gradient(@degs, @c1 0%, @c2 100%);
	background: -webkit-gradient(linear, left bottom, right top, color-stop(0%, @c1), color-stop(100%, @c2));
	background: -webkit-linear-gradient(@degs, @c1 0%, @c2 100%);
	background: -o-linear-gradient(@degs, @c1 0%, @c2 100%);
	background: -ms-linear-gradient(@degs, @c1 0%, @c2 100%);
	background: linear-gradient(@degs, @c1 0%, @c2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='@{c1}', endColorstr='@{c2}', GradientType=1);
}
