#   coding utf-8
'''
JSON serialization and deserialization.
'''

import re
import datetime as dt
import json as jsonlib

from ..exceptions import Unrecognized
from .registration import (
	register, 
	get_registered
)

__all__ = [
	'JSONSerializer',
	'serialize_json',
	'deserialize_json'
]

#	TODO: Unit tests.

class JSONSerializer:
	'''
	`JSONSerializer`s are singleton objects that serialize and deserialize 
	data to and from JSON. They are applied to data dispatched to the client, 
	so in general should produce easily comprehensible serializations. 
	'''

	def __init__(self, *types):
		self.types = types

	def serialize(self, obj, type_i):
		'''
		Serialize `obj` into a JSON-friendly value that will be recognizable by
		this serializer for deserialization.

		:obj The object to serialize. Guarenteed to be an instance of one of 
			the types passed to the constructor.
		:type_i The index of the type.
		'''
		raise NotImplemented()

	def deserialize(self, data):
		'''
		Inspect `data`, raising `Unrecognized` if this serializer does not 
		recognize (i.e. cannot deserialize) it. Otherwise, return the 
		deserialization.

		Only values of `data` that could feasibly have been generated by 
		`serialize()` should be deserialized.

		:data The data to deserialize.
		'''
		raise Unrecognized()

@register.json_serializer
class DatetimeJSONSerializer(JSONSerializer):
	'''
	The datetime, date, and time object serializer.
	'''

	def __init__(self):
		super().__init__(dt.datetime, dt.date, dt.time)
		from .. import config

		dt_config = config['datetime_interface']

		#   Read formats into a list for quicker indexing.
		self.formats = [
			dt_config['datetime_format'],
			dt_config['date_format'],
			dt_config['time_format']
		]
		self.matchers = [
			dt_config['datetime_matcher'],
			dt_config['date_matcher'],
			dt_config['time_matcher']
		]

	def serialize(self, obj, type_i):
		return obj.strftime(self.formats[type_i])

	def deserialize(self, data):
		#	Assert `data` is a string.
		if not isinstance(data, basestring):
			raise Unrecognized()
		
		for i, matcher in enumerate(self.matchers):
			if re.match(matcher, data) is not None:
				return self.types[i].strptime(data, self.formats[i])

		#	No match.
		raise Unrecognized()

#   The global serializer list.
_serializers = []

@register.pre_init
def create_serializers():
	'''
	Create the singleton instance of each registered `JSONSerializer`.
	'''
	for cls in get_registered('json_serializer'):
		_serializers.append(cls())
del create_serializers

def serialize_json(obj, fallback=None):
	'''
	Serialize a JSON object.
	'''	
	def _serialize_default(val):
		for serializer in _serializers:
			for i, typ in enumerate(serializer.types):
				if isinstance(val, typ):
					return serializer.serialize(val, i)
		
		if fallback is not None:
			#	Use the supplied fallback.
			return fallback(val)
		
		#	Couldn't serialize.
		raise TypeError(type(val))

	return jsonlib.dumps(obj, default=_serialize_default)

def deserialize_json(data):
	'''
	Deserialize JSON data.
	'''
	def _deserialize_object_hook(dct):
		for key, val in dct.items():
			for serializer in _serializers:
				try:
					nval = serializer.deserialize(val)
				except Unrecognized:
					#   `serializer` couldn't recognize the value.
					continue
				#   Update the value.
				dct[key] = nval
				#   Stop trying to deserialize.
				break
		return dct

	return jsonlib.loads(data, object_hook=_deserialize_object_hook)
